type Token @entity {
  id: ID!
  owner: Wallet
  minter: Wallet
  uri: String
  transfers: [Transfer!]! @derivedFrom(field: "token")
  contract: Contract
  epoch: Epoch
}

type Wallet @entity {
  id: ID!
  ownedTokens: [Token!]! @derivedFrom(field: "owner")
  mintedTokens: [Token!]! @derivedFrom(field: "minter")
  balance: BigInt
}

type Contract @entity {
  id: ID!
  name: String
  symbol: String
  totalSupply: BigInt
  mintedTokens: [Token!]! @derivedFrom(field: "contract")
}

type Transfer @entity {
  id: ID!
  token: Token!
  # Empty from is minting
  from: Wallet
  # Empty to is burning
  to: Wallet
  timestamp: BigInt!
  block: BigInt!
  transactionHash: String!
}

type EpochCounter @entity {
  id: ID!
  count: BigInt!
}

type Epoch @entity {
  id: ID!
  number: BigInt!
  startBlock: BigInt!
  endBlock: BigInt
  timestamp: BigInt!
  randomness: BigInt
  tokens: [Token!]! @derivedFrom(field: "epoch")
  tokenIds: [BigInt!]!
}

type Transaction @entity {
  id: ID!
}
